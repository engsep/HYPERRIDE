services:

  # The Context Broker (Orion-LD)
  orion-ld:
    image: quay.io/fiware/orion-ld:1.9.0 # fiware/orion-ld:1.9.0
    hostname: orion
    container_name: orion-ld
    depends_on:
      - mongo
    restart: unless-stopped
    expose:
      - "1026"
  # environment:
  #   - ORIONLD_INSECURE_NOTIF=true
    command: -dbhost mongo-db -db orionld -logLevel DEBUG -forwarding # -mongocOnly # for mongo > 5.0, disables NGSI-v2
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:1026/version || exit 1"]

  # Database for the Context Broker (MongoDB)
  mongo:
    image: mongo:5.0 #:5.0.31 #:8.0.4
    hostname: mongo-db
    container_name: db-mongo
    restart: unless-stopped
  # networks:
  #   - mongo-admin-net
    expose:
      - "27017"
    command: --nojournal # for mongo < 6.0
    volumes:
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongo-configdb:/data/configdb
      - mongo-db:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.runCommand({ ping: 1 }).ok' --quiet | grep -q 1"]

  # Identity Manager (Keycloak)
  keycloak:
    image: quay.io/keycloak/keycloak:latest #:26.2.4 #:23.0.6
    hostname: idm
    container_name: keycloak
    restart: unless-stopped
    expose:
      - "8080"
      - "8443"
      - "9000"
    environment:
    # - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USERNAME}
    # - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    # - KC_HTTPS_CERTIFICATE_FILE=/etc/x509/https/fullchain.pem
    # - KC_HTTPS_CERTIFICATE_KEY_FILE=/etc/x509/https/privkey.pem
      - KC_HEALTH_ENABLED=true
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_ENABLED=true
      - KC_HTTP_RELATIVE_PATH=/idm  # for Nginx
      - KC_PROXY_HEADERS=xforwarded # for Nginx
      - KC_LOG_CONSOLE_OUTPUT=json
      - KC_LOG=file,syslog,console
      - KC_LOG_FILE=/opt/keycloak/logs/keycloak.log
      - KC_LOG_LEVEL=INFO
    command: start-dev --import-realm
    volumes:
      - ./keycloak/:/opt/keycloak/data/import/
      - ./keycloak/keycloak-logs:/opt/keycloak/logs
      - keycloak-data:/opt/keycloak/data/
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /idm/health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3; cat <&3 | grep -q '\"status\": \"UP\"'"]

  # Reverse proxy and web server (Nginx)
  nginx:
    image: nginx:latest #:1.27.5
    hostname: context
    container_name: nginx
    depends_on:
      - keycloak
      - orion-ld
      - node-red
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    environment:
      - HTTP_PORT=${NGINX_HTTP_PORT}
      - HTTPS_PORT=${NGINX_HTTPS_PORT}
      - FULL_DOMAIN=${NGINX_FULL_DOMAIN}
    volumes:
    # - ./certbot/conf/live/${NGINX_FULL_DOMAIN}:/etc/letsencrypt
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:rw
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./public:/home/www/public_html/localhost/public
    entrypoint: ["/bin/sh", "-c", "/docker-entrypoint.sh nginx & while true; do [ -d /var/www/certbot/reload ] && nginx -s reload && rm -rf /var/www/certbot/reload; sleep 60; done"]
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost || exit 1"]

  # SSL Certificate renewal (Certbot)
  certbot:
    image: certbot/certbot:latest #:v4.0.0
    container_name: certbot
    restart: unless-stopped
    expose:
      - "80"
      - "443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/tmp:/var/lib/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: ["/bin/sh", "-c", "trap exit TERM; while :; do certbot certonly --webroot -w /var/www/certbot/ -d ${NGINX_FULL_DOMAIN} --register-unsafely-without-email --agree-tos --keep --non-interactive --deploy-hook 'mkdir /var/www/certbot/reload'; sleep 12h & wait $${!}; done"]
    healthcheck:
      test: ["CMD-SHELL", "find /etc/letsencrypt/live -type d -empty -exec false {} +"]

  # Dynamic DNS renewal (DuckDNS)
  duckdns:
    image: lscr.io/linuxserver/duckdns:latest #:version-a880d4d9 #:version-b1648298
    container_name: duckdns
    restart: unless-stopped
    network_mode: host
    environment:
      - SUBDOMAINS=${DUCKDNS_DOMAIN}
      - TOKEN=${DUCKDNS_TOKEN}
      - UPDATE_IP=both
    healthcheck:
      test: ["CMD-SHELL", "nslookup ${DUCKDNS_DOMAIN}.duckdns.org || exit 1"]

  # Context Provider, Custom IoT Agent, Demo webapp, Flow-based development and Swagger (Node-RED)
  node-red:
  # build: node-red
    image: nodered/node-red:latest #:4.0.9
    hostname: ${HOSTNAME:-node-red}
    container_name: node-red
    depends_on:
      - ganache
      - keycloak
      - mosquitto
      - orion-ld
    restart: unless-stopped
    ports:
      - "${PORT:-1880}:1880"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - FULL_DOMAIN=${NGINX_FULL_DOMAIN}
      - HTTP_PORT=${NGINX_HTTP_PORT}
      - HTTPS_PORT=${NGINX_HTTPS_PORT}
      - HTTP_URL=http://${NGINX_FULL_DOMAIN}:${NGINX_HTTP_PORT}
      - HTTPS_URL=https://${NGINX_FULL_DOMAIN}:${NGINX_HTTPS_PORT}
      - CLIENT_ID=${ORION_CLIENT_ID}
      - CLIENT_SECRET=${ORION_CLIENT_SECRET}
      - REALM=${REALM_NAME}
      - USERNAME=${REALM_USERNAME}
      - PASSWORD=${REALM_PASSWORD}
      - TZ=Europe/Amsterdam
    user: root
    entrypoint: bash -c "cd /data; npm i --unsafe-perm --no-update-notifier --no-fund --only=production; chown -R node-red:node-red .; cd /usr/src/node-red; su -c ./entrypoint.sh node-red"
    volumes:
      - ./node-red/data:/data
      - ./public:/public

  # Ethereum Blockchain with deployed PoE smart contract (Ganache)
  ganache:
  # image: trufflesuite/ganache #:v7.9.2
    image: hybuild/ganache:latest #:poe9 (PoE only) #:etk4 (with MDN, THE and ETK)
    hostname: ethereum
    container_name: ganache
    restart: unless-stopped
    ports:
      - "7545:7545"
  # command: --database.dbPath /db --server.host 0.0.0.0 --server.port 7545 --wallet.mnemonic "visit carpet logic blame furnace confirm rebel deliver medal mean illness error"
    volumes:
      - ganache-db:/db
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:7545', { method:'POST', headers:{ 'content-type':'application/json' }, body:JSON.stringify({ id:1, jsonrpc:'2.0', method:'eth_blockNumber' }) }).then(res => res.json()).then(data => { if (data.result) { process.exit(0); } else { process.exit(1); } }).catch(err => process.exit(1));"]

  # MQTT Broker (MosQuiTTo)
  mosquitto:
    image: eclipse-mosquitto:latest #:2.0.21
    hostname: mqtt
    container_name: mosquitto
    restart: unless-stopped
    expose:
      - "9001"
    ports:
      - "1883:1883"
    command: mosquitto -c /mosquitto-no-auth.conf
    volumes:
      - mosquitto-data:/mosquitto/data
      - mosquitto-log:/mosquitto/log
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 mosquitto_sub -h localhost -t '$$SYS/broker/uptime' -C 1 || exit 1"]

  # docker exec -it mosquitto mosquitto_sub -h mosquitto -t "/#"
  # docker exec -it mosquitto mosquitto_pub -h mosquitto -m "Hello world!" -t "/test"

  # MongoDB front-end (Mongo Express)
  mongo-express:
    image: mongo-express:latest #:1.0.2
    hostname: mongo-admin
    container_name: mongo-express
    depends_on:
      - mongo
    restart: unless-stopped
  # networks:
  #   - mongo-admin-net
    expose:
      - "8081"
    environment:
    # - ME_CONFIG_BASICAUTH=true
    # - ME_CONFIG_BASICAUTH_USERNAME=admin
    # - ME_CONFIG_BASICAUTH_PASSWORD=pass
      - ME_CONFIG_MONGODB_SERVER=mongo-db
      - ME_CONFIG_SITE_BASEURL=/mongoadmin
      - ME_CONFIG_HEALTH_CHECK_PATH=/status
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=3 --spider http://admin:pass@127.0.0.1:8081/mongoadmin/status || exit 1"]

  # docker run -it --rm --net=db --name mongo-express -e ME_CONFIG_BASICAUTH=false -e ME_CONFIG_MONGODB_SERVER=mongo-db mongo-express
  # docker run -it --rm --net=db --name ngrok -e NGROK_AUTHTOKEN=<authtoken> ngrok/ngrok:latest http 8081

  # Docker front-end (Portainer)
  portainer:
    image: portainer/portainer-ce:alpine #:2.27.6-alpine
    hostname: docker-admin
    container_name: portainer
    restart: unless-stopped
    expose:
      - "8000"
      - "9443"
    ports:
     - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # - portainer-data:/data
      - ./portainer:/data # admin|123
    command: ["-H", "unix:///var/run/docker.sock"]
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=3 --spider http://127.0.0.1:9000/api/system/status || exit 1"]

  # SIEM with MITRE ATT&CK support (Wazuh)
  wazuh.manager:
    image: wazuh/wazuh-manager:4.12.0
    hostname: wazuh.manager
    container_name: wazuh-manager
  # restart: always
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 655360
        hard: 655360
    expose:
      - "1514"
      - "1515"
      - "55000"
    environment:
      - INDEXER_URL=https://wazuh.indexer:9200
      - INDEXER_USERNAME=${WAZUH_ADMIN_USERNAME}
      - INDEXER_PASSWORD=${WAZUH_ADMIN_PASSWORD}
      - FILEBEAT_SSL_VERIFICATION_MODE=full
      - SSL_CERTIFICATE_AUTHORITIES=/etc/ssl/root-ca.pem
      - SSL_CERTIFICATE=/etc/ssl/filebeat.pem
      - SSL_KEY=/etc/ssl/filebeat.key
      - API_USERNAME=${WAZUH_API_USERNAME}
      - API_PASSWORD=${WAZUH_API_PASSWORD}
    volumes:
      - ./wazuh/config/wazuh_indexer_ssl_certs/root-ca-manager.pem:/etc/ssl/root-ca.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.manager.pem:/etc/ssl/filebeat.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.manager-key.pem:/etc/ssl/filebeat.key
      - ./wazuh/config/wazuh_cluster/wazuh_manager.conf:/wazuh-config-mount/etc/ossec.conf
      - ./wazuh/config/rules/local_rules.xml:/var/ossec/etc/rules/local_rules.xml
      - ./wazuh/config/shared/ar.conf:/var/ossec/etc/shared/ar.conf
      - ./keycloak/keycloak-logs:/var/log/keycloak
    healthcheck:
    # test: ["CMD-SHELL", "curl -k --silent https://localhost:55000/?pretty=true -H \"Authorization: Bearer $(curl -k --silent -u $WAZUH_API_USERNAME:$WAZUH_API_PASSWORD -X POST https://localhost:55000/security/user/authenticate?raw=true)\" | grep -q 'Wazuh API'"]
      test: ["CMD-SHELL", "curl -ks https://localhost:55000/manager/status -H \"Authorization: Bearer $(curl -ksu $WAZUH_API_USERNAME:$WAZUH_API_PASSWORD -X POST https://localhost:55000/security/user/authenticate?raw=true)\" | grep '\"*error\"* *: *0'"]

  wazuh.indexer:
    image: wazuh/wazuh-indexer:4.12.0
    hostname: wazuh.indexer
    container_name: wazuh-indexer
  # restart: always
    restart: unless-stopped
    expose:
      - "9200"
    environment:
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - wazuh-indexer-data:/var/lib/wazuh-indexer
      - ./wazuh/config/wazuh_indexer_ssl_certs/root-ca.pem:/usr/share/wazuh-indexer/certs/root-ca.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.indexer-key.pem:/usr/share/wazuh-indexer/certs/wazuh.indexer.key
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.indexer.pem:/usr/share/wazuh-indexer/certs/wazuh.indexer.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/admin.pem:/usr/share/wazuh-indexer/certs/admin.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/admin-key.pem:/usr/share/wazuh-indexer/certs/admin-key.pem
      - ./wazuh/config/wazuh_indexer/wazuh.indexer.yml:/usr/share/wazuh-indexer/opensearch.yml
      - ./wazuh/config/wazuh_indexer/internal_users.yml:/usr/share/wazuh-indexer/opensearch-security/internal_users.yml
    healthcheck:
    # test: ["CMD-SHELL", "curl -k --silent -u $WAZUH_ADMIN_USERNAME:$WAZUH_ADMIN_PASSWORD https://localhost:9200/?pretty=true | grep -q 'cluster_name'"]
      test: ["CMD-SHELL", "curl -ksu $WAZUH_ADMIN_USERNAME:$WAZUH_ADMIN_PASSWORD https://localhost:9200/_cluster/health | grep '\"*status\"* *: *\"*green\"*'"]

  wazuh-dashboard:
    image: wazuh/wazuh-dashboard:4.12.0
    hostname: wazuh-dashboard
    container_name: wazuh-dashboard
  # restart: always
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - INDEXER_USERNAME=${WAZUH_ADMIN_USERNAME}
      - INDEXER_PASSWORD=${WAZUH_ADMIN_PASSWORD}
      - WAZUH_API_URL=https://wazuh.manager
      - DASHBOARD_USERNAME=${WAZUH_DASHBOARD_USERNAME}
      - DASHBOARD_PASSWORD=${WAZUH_DASHBOARD_PASSWORD}
      - API_USERNAME=${WAZUH_API_USERNAME}
      - API_PASSWORD=${WAZUH_API_PASSWORD}
    volumes:
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.dashboard.pem:/usr/share/wazuh-dashboard/certs/wazuh-dashboard.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.dashboard-key.pem:/usr/share/wazuh-dashboard/certs/wazuh-dashboard-key.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/root-ca.pem:/usr/share/wazuh-dashboard/certs/root-ca.pem
      - ./wazuh/config/wazuh_dashboard/opensearch_dashboards.yml:/usr/share/wazuh-dashboard/config/opensearch_dashboards.yml
      - ./wazuh/config/wazuh_dashboard/wazuh.yml:/usr/share/wazuh-dashboard/data/wazuh/config/wazuh.yml
    depends_on:
      - wazuh.indexer
  # links:
  #   - wazuh.indexer:wazuh.indexer
  #   - wazuh.manager:wazuh.manager
      - wazuh.manager
    healthcheck:
    # test: ["CMD-SHELL", "curl -k --silent -u ${WAZUH_DASHBOARD_USERNAME}:${WAZUH_DASHBOARD_PASSWORD} https://localhost:5601/wazuh/api/status | grep -q 'overall'"]
      test: ["CMD-SHELL", "curl -ksu $WAZUH_DASHBOARD_USERNAME:$WAZUH_DASHBOARD_PASSWORD https://localhost:5601/wazuh/api/status | grep '\"*state\"* *: *\"*green\"*'"]

volumes:
  blockchain-db: ~
  ganache-db: ~
  keycloak-data: ~
  mongo-configdb: ~
  mongo-db: ~
  mosquitto-data: ~
  mosquitto-log: ~
  portainer-data: ~
  wazuh-indexer-data: ~

# networks:
#   mongo-admin-net:
#     name: db
#     driver: bridge
